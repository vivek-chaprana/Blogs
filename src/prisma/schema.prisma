generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  email      String  @unique
  image      String?
  coverImage String?
  username   String  @unique
  bio        String?

  emailVerified          DateTime?
  hashedPassword         String?
  role                   String    @default("user")
  provider               String    @default("email")
  isVerified             Boolean   @default(false)
  hasCompletedOnboarding Boolean   @default(false)
  lastEmailSent          DateTime?
  accounts               Account[]
  sessions               Session[]
  createdAt              DateTime  @default(now())

  blogPost            BlogPost[]
  comment             Comment[]
  followedBy          User[]     @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs       String[]   @db.ObjectId
  following           User[]     @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs        String[]   @db.ObjectId
  followingTopicIDs   String[]   @db.ObjectId
  followingCategories Topic[]    @relation(fields: [followingTopicIDs], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// BlogPost entity
model BlogPost {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  coverImage  String?
  content     Json
  tags        String[]
  readingTime Int?
  likes       Int        @default(0)
  slug        String     @unique
  status      PostStatus @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  comments    Comment[]
  topicID     String     @db.ObjectId
  topic       Topic      @relation(fields: [topicID], references: [id])
}

// Topic entity
model Topic {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String     @unique
  description String?
  userIDs     String[]   @db.ObjectId
  users       User[]     @relation(fields: [userIDs], references: [id])
  BlogPost    BlogPost[]
}

// Comment entity
model Comment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  text            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String    @db.ObjectId
  blogPost        BlogPost  @relation(fields: [blogPostId], references: [id])
  blogPostId      String    @db.ObjectId
  parentComment   Comment?  @relation("replies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentCommentId String?   @db.ObjectId
  replies         Comment[] @relation("replies")
}

// Enum for blog post status
enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
